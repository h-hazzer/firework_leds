#include <FastLED.h>  // header file
//==============================================================================================================================
#define NUM_LEDS 101  // number of led present in your strip
#define DATA_PIN 3    // digital pin of your arduino

CRGB leds[NUM_LEDS];  // Make this global to edit anywhere

// int r = 0;
// int g = 0;
// int b = 0;
void setup() {
  delay(100); //This apparently adds some safety
  // put your setup code here, to run once:
  FastLED.addLeds<WS2812B, DATA_PIN, BRG>(leds, NUM_LEDS);
  //Serial.begin(9600);
  //Serial.println("msg")
}

//A collection of short LED patterns, as an array, that can be retrieved from the main loop and used to intoduce new pulses into the sequence
//It will now start a pattern by adding the leading part to the first position on the strip, shifting all leds up and repeating with the next part of the pattern
//==============================================================================================================================
int patterns(int pattern) {
  //Example pattern int p1[3][3] = {{255,0,0},{0,255,0},{0,0,255}} Can be used as a simple R-G-B pulse
  int p1[3][3] = { { 255, 0, 0 }, { 0, 255, 0 }, { 0, 0, 255 } };                               //RGB
  int p2[3][3] = { { 0, 255, 0 }, { 0, 0, 255 }, { 255, 0, 0 } };                               //GBR
  int p3[3][3] = { { 0, 0, 255 }, { 0, 255, 0 }, { 255, 0, 0 } };                               //BRG
  int p4[5][3] = { { 255, 0, 0 }, { 200, 0, 0 }, { 150, 0, 0 }, { 100, 0, 0 }, { 50, 0, 0 } };  //Fading red

  //Serial << "{" << p1[0][0] << "}" ;


  return patterns[pattern];
}

//Takes in the current status of leds CRGB array and shift it up by 1, outputs array new leds array to show later
//==============================================================================================================================
void shiftUp() {

  //FastLED.show();
  //delay(5000);
  
  //Start from the end of the array, make the last one equal to the one below and so on
  for (int i = NUM_LEDS; i >= 0; i--) {
    //The first LED doesnt have a predecessor, and therefore is turned off
    if (i == 0) {
      leds[0].setRGB(0, 0, 0);
    }
    //Make the state of the next LED in line the same state as the one before
    else {
      leds[i] = leds[i - 1];
    }
  }
}

//Grab one of the patterns and shift it up until it is completely on the strip
//Requires: 
//  Pattern number
//  Length of pattern
//==============================================================================================================================
void add_pattern(int pattern_number) {
  
  //For testing purposes use this as a plac
  int pattern[3][3] = { { 255, 0, 0 }, { 0, 255, 0 }, { 0, 0, 255 } };
  int length = sizeof(pattern)/sizeof(pattern[0]); //length calculation
  
  //For now just have it add a R-G-B pattern
  for(int i; i < length; i++){
    //Move everything up by one first
    shiftUp();
    //Add the next colour to the strip and carry on until no more is left
    leds[0].setRGB(pattern[i,0], pattern[i,1], pattern[i,2]);
    FastLED.show();
  }
}


//THIS WILL MAYBE REPLACE CURRENT METHOD OF PUSHING NEW PATTERN
//==============================================================================================================================
//==============================================================================================================================
#include <iostream>
#include <memory>

int (*patterns(int pattern_number))[3] {
  static int p1[3][3] = { { 255, 0, 0 }, { 0, 255, 0 }, { 0, 0, 255 } };                               //RGB
  static int p2[3][3] = { { 0, 255, 0 }, { 0, 0, 255 }, { 255, 0, 0 } };                               //GBR
  static int p3[3][3] = { { 0, 0, 255 }, { 0, 255, 0 }, { 255, 0, 0 } };                               //BRG
  static int p4[5][3] = { { 255, 0, 0 }, { 200, 0, 0 }, { 150, 0, 0 }, { 100, 0, 0 }, { 50, 0, 0 } };  //Fading red

  switch (pattern_number) {
    case 0:
      return p1;
    case 1:
      return p2;
    case 2:
      return p3;
    case 3:
      return p4;
    default:
      return nullptr;
  }
}


void add_pattern(int pattern_number) {
  
  //For testing purposes use this as a plac
  int pattern[3][3] = { { 255, 0, 0 }, { 0, 255, 0 }, { 0, 0, 255 } };
  int length = sizeof(pattern)/sizeof(pattern[0]); //length calculation
  
  //For now just have it add a R-G-B pattern
  for(int i; i < length; i++){

    //Add the next colour to the strip and carry on until no more is left
    pattern[i,0], pattern[i,1], pattern[i,2];

  }
}

void main(){
    int pattern_n = 0;
    
}


//==============================================================================================================================
//==============================================================================================================================



//MAIN FUNCTION
//==============================================================================================================================
int j = 0;
void loop() {
  delay(30);
  if(j == 2){
    j = 0;
    add_pattern(1);
  }
  j += 1;
  //Every 3rd shift up add a new pattern
  

  // //To test the pulse mechanism
  // leds[0].setRGB(255,0,0); //R+G

  // for (int i = 0; i <= NUM_LEDS; i++) {
  //   FastLED.show();
  //   shiftUp();
  //   delay(30);
  // }
  // leds[0].setRGB(0, 0, 0);
  // FastLED.show();
} 


//==============================================================================================================================
//Sequence of shifting leds up
//1010
//   ^
//1011
//  ^
//1001
// ^
//1101
//^
//0101
//The when the pointer is in the 0th position (first led in strip) it must 'manually' write 0 to it as there's no value beyond it
#include <FastLED.h>  // header file
//==============================================================================================================================
#define NUM_LEDS 101  // number of led present in your strip
#define DATA_PIN 3    // digital pin of your arduino

CRGB leds[NUM_LEDS];  // Make this global to edit anywhere

// int r = 0;
// int g = 0;
// int b = 0;
void setup() {
  delay(100); //This apparently adds some safety
  // put your setup code here, to run once:
  FastLED.addLeds<WS2812B, DATA_PIN, BRG>(leds, NUM_LEDS);
  //Serial.begin(9600);
  //Serial.println("msg")
}

//A collection of short LED patterns, as an array, that can be retrieved from the main loop and used to intoduce new pulses into the sequence
//It will now start a pattern by adding the leading part to the first position on the strip, shifting all leds up and repeating with the next part of the pattern
//==============================================================================================================================
int patterns(int pattern) {
  //Example pattern int p1[3][3] = {{255,0,0},{0,255,0},{0,0,255}} Can be used as a simple R-G-B pulse
  int p1[3][3] = { { 255, 0, 0 }, { 0, 255, 0 }, { 0, 0, 255 } };                               //RGB
  int p2[3][3] = { { 0, 255, 0 }, { 0, 0, 255 }, { 255, 0, 0 } };                               //GBR
  int p3[3][3] = { { 0, 0, 255 }, { 0, 255, 0 }, { 255, 0, 0 } };                               //BRG
  int p4[5][3] = { { 255, 0, 0 }, { 200, 0, 0 }, { 150, 0, 0 }, { 100, 0, 0 }, { 50, 0, 0 } };  //Fading red

  //Serial << "{" << p1[0][0] << "}" ;


  return patterns[pattern];
}

//Takes in the current status of leds CRGB array and shift it up by 1, outputs array new leds array to show later
//==============================================================================================================================
void shiftUp() {

  //FastLED.show();
  //delay(5000);
  
  //Start from the end of the array, make the last one equal to the one below and so on
  for (int i = NUM_LEDS; i >= 0; i--) {
    //The first LED doesnt have a predecessor, and therefore is turned off
    if (i == 0) {
      leds[0].setRGB(0, 0, 0);
    }
    //Make the state of the next LED in line the same state as the one before
    else {
      leds[i] = leds[i - 1];
    }
  }
}

//Grab one of the patterns and shift it up until it is completely on the strip
//Requires: 
//  Pattern number
//  Length of pattern
//==============================================================================================================================
void add_pattern(int pattern_number) {
  
  //For testing purposes use this as a plac
  int pattern[3][3] = { { 255, 0, 0 }, { 0, 255, 0 }, { 0, 0, 255 } };
  int length = sizeof(pattern)/sizeof(pattern[0]); //length calculation
  
  //For now just have it add a R-G-B pattern
  for(int i; i < length; i++){
    //Move everything up by one first
    shiftUp();
    //Add the next colour to the strip and carry on until no more is left
    leds[0].setRGB(pattern[i,0], pattern[i,1], pattern[i,2]);
    FastLED.show();
  }
}

//MAIN FUNCTION
//==============================================================================================================================
int j = 0;
void loop() {
  delay(30);
  if(j == 2){
    j = 0;
    add_pattern(1);
  }
  j += 1;
  //Every 3rd shift up add a new pattern
  

  // //To test the pulse mechanism
  // leds[0].setRGB(255,0,0); //R+G

  // for (int i = 0; i <= NUM_LEDS; i++) {
  //   FastLED.show();
  //   shiftUp();
  //   delay(30);
  // }
  // leds[0].setRGB(0, 0, 0);
  // FastLED.show();
} 


//==============================================================================================================================
//Sequence of shifting leds up
//1010
//   ^
//1011
//  ^
//1001
// ^
//1101
//^
//0101
//The when the pointer is in the 0th position (first led in strip) it must 'manually' write 0 to it as there's no value beyond it
